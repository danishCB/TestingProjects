##
## Build configuration for Circle CI
##
#
#
#
#general:
#  artifacts:
#  - D:\DanishWork\JenkinsSamples\TestingProjects\TestingProjects\app\build
#
#machine:
#  environment:
#    ANDROID_HOME: C:\Users\Danish\AppData\Local\Android\Sdk
#
#dependencies:
#  override:
#  - echo y | android update sdk --no-ui --all --filter tools,platform-tools,build-tools-26.0.2,android-26,extra-google-m2repository,extra-google-google_play_services,extra-android-support
#  - ANDROID_HOME= C:\Users\Danish\AppData\Local\Android\Sdk ./gradlew dependencies
#
#test:
#  override:
#  - (./gradlew assemble):
#timeout: 360



#dependencies:
#  override:
#  - echo y | android update sdk --no-ui --all --filter tools,platform-tools,build-tools-26.0.2,android-26,extra-google-m2repository,extra-google-google_play_services,extra-android-support
#  - ANDROID_HOME=C:/Users/Danish/AppData/Local/Android/Sdk ./gradlew dependencies
#
##Pull any submodules
#checkout:
#  post:
#  - git submodule init
#  - git submodule update
#
##-PdisablePreDex is a must else gradle just dies due to memory limit
##Replace
#test:
#  override:
#  - (./gradlew assemble -PdisablePreDex):
#      timeout: 360
#  - cp -r ${HOME}/${TestingProjects}/app/build/outputs/apk/ $CIRCLE_ARTIFACTS
#  - emulator -avd circleci-android22 -no-audio -no-window:
#      background: true
#      parallel: true
#  # wait for it to have booted
#  - circle-android wait-for-boot
#  # run tests  against the emulator.
#  - ./gradlew connectedAndroidTest
#
##Deploy when tests pass
#deployment:
#  master:
#    branch: master
#    commands:
#    - (./gradlew crashlyticsUploadDistributionProduction -PdisablePreFex):
#timeout: 720



version: 2
jobs:
  build:
    #working_directory: ~/danishCB/TestingProjects
    docker:
    - image: circleci/android:api-25-alpha
    environment:
      JVM_OPTS: -Xmx1536m
    steps:
    - checkout
    #    - restore_cache:
    #        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "presentation/build.gradle" }}
    #      - run:
    #         name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
    #         command: sudo chmod +x ./gradlew
    - restore_cache:
        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
    - run:
        name: Download Dependencies
        command: chmod +x ./gradlew
    #    - run:
    #        name: chmod permissions
    #        command: chmod +x ./gradlew
    - save_cache:
        paths:
        - ~/.gradle
        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
    - store_artifacts:
        path: app/
        destination: reports
    - store_test_results:
        path: app/
    - run:
        name: Run Build
        command: ./gradlew build
    - store_artifacts:
        path: app/
        destination: artifact-files


#    - run: mkdir artifacts
#    - run:
#        name: Create AVD
#        command: |
#          echo "n" | avdmanager -v create avd -n androidlearn -k "system-images;android-25;google_apis;armeabi-v7a" -c 512M -g google_apis  -d "Nexus 7 2013"
#    - run:
#        name: Run Emulator
#        background: true
#      command: |
#        C:/Users/Danish/AppData/Local/Android/Sdk/tools/emulator -no-window -noaudio -no-boot-anim -gpu swiftshader @androidlearn
#    - run:
#        name: Wait for Emulator
#        no_output_timeout: 15m
#        command: |
#          sleep 15
#          $ANDROID_SDK_ROOT/platform-tools/adb devices
#          sleep 10
#    - run:
#        name: Fetch logcat and props
#        background: true
#        command: |
#          C:/Users/Danish/AppData/Local/Android/Sdk/platform-tools/adb logcat >> ./artifacts/logcat.txt
#          C:/Users/Danish/AppData/Local/Android/Sdk/platform-tools/adb shell getprop >> ./artifacts/props.txt
#    - run:
#        name: Run Android Connected Tests
#        command: |
#          export ADB_INSTALL_TIMEOUT=120
#          export ANDROID_HOME=$ANDROID_SDK_ROOT
#          # ./scripts/test.sh
#          ./gradlew assembleDebug
#          # Wait for emulator to fully boot
#          # TODO: Need to create a good check
#          sleep 60
#          # Is the emulator still running?
#          adb devices
#          # Check if package manager is running
#          adb shell pm list packages
#          # Install package
#          C:/Users/Danish/AppData/Local/Android/Sdk/platform-tools/adb install /home/android/androidlearn/app/build/outputs/apk/app-debug.apk
#          ./gradlew connectedAndroidTest
#        - store_artifacts:
#            path: ~/androidlearn/artifacts
#        destination: env


#    #    - restore_cache:
#    #        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "presentation/build.gradle" }}
#    #      - run:
#    #         name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
#    #         command: sudo chmod +x ./gradlew
#    - run:
#        name: chmod permissions
#        command: chmod +x ./gradlew
#    - save_cache:
#        paths:
#        - ~/.gradle
#        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#    - store_artifacts:
#        path: app/build/reports
#        destination: reports
#    - store_test_results:
#        path: app/build/test-results
#    - run:
#        name: Run Build
#        command: ./gradlew build
#    - store_artifacts:
#        path: app/build/outputs/apk/debug/
#        destination: artifact-file





#    - save_cache:
#        paths:
#        - ~/.gradle
#        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "presentation/build.gradle" }}
#    - run:
#        name: chmod permissions
#        command: chmod +x ./gradlew
#    - store_artifacts:
#        path: app/build/reports
#    - store_test_results:
#        path: presentation/build/test-results
#    - run:
#        name: Run Domain Module Unit Tests
#        command: ./gradlew :domain:test
#    - store_artifacts:
#        path: domain/build/reports
#    - store_test_results:
#        path: domain/build/test-results
#    - run:
#        name: Run Data Module Unit Tests
#        command: ./gradlew :data:testDebugUnitTest
#    - store_artifacts:
#        path: data/build/reports
#    - store_test_results:
#        path: data/build/test-results
#    - run:
#        name: Run Lint Test
#        command: ./gradlew lint
#    - store_artifacts:
#    path: D:\DanishWork\JenkinsSamples\TestingProjects\TestingProjects\app
